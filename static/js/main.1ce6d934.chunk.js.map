{"version":3,"sources":["lib/attacks.ts","reducers/routerReducer.ts","components/MainMenu.tsx","components/Options.tsx","components/About.tsx","components/NewGame.tsx","common/helpers.tsx","lib/Unit.ts","lib/levels.ts","reducers/boardReducer.ts","components/LevelSelect.tsx","common/redux.tsx","lib/ai.ts","components/board/Layer.tsx","components/board/MouseLayer.tsx","components/board/GameBoard.tsx","reducers/inventoryReducer.ts","components/board/Infobar.tsx","components/routes.tsx","components/Ingame.tsx","components/CustomRouter.tsx","reducers/index.ts","App.tsx","index.tsx"],"names":["AttackName","routerSlice","createSlice","name","initialState","currentRoute","reducers","changeRoute","state","action","payload","actions","MainMenu","dispatch","useDispatch","className","Button","onClick","size","variant","Options","About","NewGame","useState","changeName","value","onChange","e","target","locationsNextTo","x","y","distance","locations","i","j","Math","abs","push","tileDistance","tile1","tile2","attacks","attack1","type","description","damage","range","attack2","baseInfo","player_unit1","image","imageFile","tiles","color","maxLength","moves","cpu_unit1","hard_drive","rainbow_table","Unit","finished","movesTaken","startingTiles","unitId","attrs","console","warn","this","startTurn","map","atk","allAttacks","location","_","some","unitTile","isEqual","amount","take","length","head","newTiles","reject","unshift","removeTiles","loc","_attack","canMoveTo","attack","otherUnit","endTurn","cloneDeep","connectors","forEach","defaultBoard","selectedUnit","selectedAttack","currentTurn","uploadLocations","selectedUploadLocation","playerUnits","cpuUnits","setupPhase","isWon","isLost","parseTiles","str","trim","split","line","letter","exists","flat","levels","initializeBoard","handleMovement","clickedTile","clickedUnit","hasMovementLeft","boardTile","find","tile","Error","concat","unit","flatMap","t","isAnyOtherUnitOn","moveTo","movesRemaining","getAttacks","removeUnitAtLoc","units","filter","boardSlice","boardMouseClick","isOn","isUploadLocation","handleSelectUploadLocation","attacked","canAttack","performAttack","handleAttack","moved","checkOtherStatuses","endCurrentUnitTurn","selectAttack","undoMovement","resetMovement","selectLevel","_state","newBoard","startGame","unPlaceCurrentUnit","placeUnit","newUnit","currentTeam","every","log","nextTeam","LevelSelect","style","width","height","marginRight","level","n","startLevel","useBoard","useSelector","board","takeWeightedMove","weighedTiles","sortPossibilities","tilesCanMoveTo","p","attackNow","poss","weight","choice","sample","takeWeightedAttack","unitsToAttack","reduce","acc","unitsCanAttack","minBy","isAnyUnitOn","sortBy","weighTile","unitDist","minDistFromEnemy","unitDistFromNow","wouldBeInRangeToAttackIfMoved","unitWillGrow","tileLoc","distances","min","Layer","index","children","zIndex","MouseTile","MouseLayer","useEffect","setTimeout","playAsComputer","TileBackground","fill","opacity","TileLayer","UnitComp","headImage","href","headText","textLength","cx","cy","r","getConnectors","connection","loc1","loc2","xSpot","ySpot","horiz","ImageComp","UnitLayer","renderMovementIndicators","otherUnitsTiles","found","otherUnitsTile","renderAttackIndicators","selectedUnitTile","renderUploadSpots","EffectsLayer","EndPopup","position","paddingTop","margin","textAlign","padding","border","backgroundColor","GameBoard","defaultUnits","ownedUnits","inventorySlice","buyUnit","AttackButton","selectedClass","PlaceUnitRow","placed","inventory","amountLeft","PlaceUnitButtons","unitIds","Object","keys","key","placedUnitExistsHere","UnitInfo","JSON","stringify","Infobar","allRoutes","CustomRouter","routerState","route","CurrentRoute","routes","routerReducer","boardReducer","inventoryReducer","store","createStore","combineReducers","window","getState","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ce6d934.chunk.js","sourcesContent":["export type Attack = {\n    name: string;\n    type: string;\n    description: string;\n    damage: number;\n    range: number;\n};\n\nexport enum AttackName {\n    attack1 = 'attack1',\n    attack2 = 'attack2',\n}\n\nconst attacks: Record<AttackName, Attack> = {\n    attack1: {\n        name: 'attack_one',\n        type: 'standard',\n        description: 'does an attack super goodly',\n        damage: 2,\n        range: 1,\n    },\n    attack2: {\n        name: 'cpu_attack',\n        type: 'standard',\n        description: 'does an attack super goodly',\n        damage: 1,\n        range: 1,\n    },\n};\n\nexport default attacks;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ntype RouterState = {\n    currentRoute: string;\n};\n\nconst initialState: RouterState = {\n    currentRoute: '/level-select',\n};\n\nconst routerSlice = createSlice({\n    name: 'router',\n    initialState,\n    reducers: {\n        changeRoute: (state, action: PayloadAction<string>) => {\n            state.currentRoute = action.payload;\n        },\n    },\n});\n\nexport const { changeRoute } = routerSlice.actions;\nexport default routerSlice.reducer;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { changeRoute } from 'src/reducers/routerReducer';\n\nconst MainMenu: React.FC = () => {\n    const dispatch = useDispatch();\n    return (\n        <div className='text-center'>\n            <div className='row top' />\n            <h1>The Game</h1>\n            <div className='row'>\n                <Button onClick={() => dispatch(changeRoute('/new-game'))} size='lg' variant='primary'>\n                    New Game\n                </Button>\n            </div>\n            <div className='row'>\n                <Button onClick={() => dispatch(changeRoute('/options'))} size='lg' variant='primary'>\n                    Options\n                </Button>\n            </div>\n            <div className='row'>\n                <Button onClick={() => dispatch(changeRoute('/about'))} size='lg' variant='primary'>\n                    About\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default MainMenu;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { changeRoute } from 'src/reducers/routerReducer';\n\nconst Options: React.FC = () => {\n    const dispatch = useDispatch();\n    return (\n        <div className='text-center'>\n            <div className='row top' />\n            <h1>Options</h1>\n            <div className='row'>\n                <Button onClick={() => dispatch(changeRoute('/'))} size='lg' variant='primary'>\n                    Back\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default Options;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { changeRoute } from 'src/reducers/routerReducer';\n\nconst About: React.FC = () => {\n    const dispatch = useDispatch();\n    return (\n        <div className='text-center'>\n            <div className='row top' />\n            <h1>About</h1>\n            <h4>I made it</h4>\n            <div className='row'>\n                <Button onClick={() => dispatch(changeRoute('/'))} size='lg' variant='primary'>\n                    Back\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default About;\n","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { changeRoute } from 'src/reducers/routerReducer';\n\nconst NewGame: React.FC = () => {\n    const dispatch = useDispatch();\n    const [name, changeName] = useState('');\n    return (\n        <div className='text-center'>\n            <div className='row top' />\n            <h1>New Game</h1>\n            <label>Name</label>\n            <input className='form-control' value={name} onChange={e => changeName(e.target.value)} />\n            <div className='row'>\n                <Button onClick={() => dispatch(changeRoute('/level-select'))} size='lg' variant='primary'>\n                    Start Game\n                </Button>\n            </div>\n            <div className='row'>\n                <Button onClick={() => dispatch(changeRoute('/'))} size='lg' variant='primary'>\n                    Cancel\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default NewGame;\n","import { BoardLocation } from 'src/lib/types';\n\nexport const locationsNextTo = ([x, y]: BoardLocation, distance = 1): BoardLocation[] => {\n    const locations = [];\n    for (let i = -distance; i <= distance; i++) {\n        for (let j = -distance; j <= distance; j++) {\n            if (Math.abs(i) + Math.abs(j) <= distance && !(i === 0 && j === 0)) {\n                locations.push([x + i, y + j] as BoardLocation);\n            }\n        }\n    }\n    return locations;\n};\n\nexport const tileDistance = (tile1: BoardLocation, tile2: BoardLocation) => {\n    return Math.abs(tile1[0] - tile2[0]) + Math.abs(tile1[1] - tile2[1]);\n};\n","import _ from 'lodash';\nimport { tileDistance } from 'src/common/helpers';\nimport allAttacks, { Attack, AttackName } from './attacks';\nimport { BoardLocation } from './types';\n\nconst baseInfo = {\n    player_unit1: {\n        image: 'r',\n        imageFile: null,\n        tiles: [],\n        color: 'orange',\n        name: 'the_unit',\n        maxLength: 5,\n        moves: 4,\n        attacks: ['attack1', 'attack2'] as AttackName[],\n    },\n    cpu_unit1: {\n        image: 'Z',\n        imageFile: null,\n        tiles: [],\n        color: 'lightblue',\n        name: 'the_bad_guy',\n        maxLength: 6,\n        moves: 2,\n        attacks: ['attack2'] as AttackName[],\n    },\n    hard_drive: {\n        image: 'hard_drive',\n        tiles: [],\n        imageFile: 'hard_drive.png',\n        color: 'rgb(174, 173, 146)',\n        name: 'hard_drive',\n        maxLength: 3,\n        moves: 4,\n        attacks: ['attack1'] as AttackName[],\n    },\n    rainbow_table: {\n        image: 'rainbow_table',\n        imageFile: 'rainbow_table.png',\n        tiles: [],\n        color: 'rgb(123, 180, 86)',\n        name: 'rainbow_table',\n        maxLength: 5,\n        moves: 2,\n        attacks: ['attack1'] as AttackName[],\n    },\n    // private key\n    //   key with army hat\n    // scope\n    // cookies\n    // cluster\n    // MEAN ELK LAMP stack\n    // /dev/null\n};\n\nexport type UnitID = keyof typeof baseInfo;\n\ntype UnitConnection = [BoardLocation, BoardLocation];\nclass Unit {\n    public attacks: AttackName[];\n    public color: string;\n    public finished = false;\n    public image: string | null;\n    public imageFile: string | null;\n    public maxLength: number;\n    public moves: number;\n    public movesTaken = 0;\n    public name: string;\n    public startingTiles: BoardLocation[] = [];\n    public tiles: BoardLocation[];\n    public unitId: UnitID;\n\n    constructor(type: UnitID, tiles: BoardLocation[]) {\n        const attrs = baseInfo[type];\n        if (!attrs) {\n            console.warn('cannot find unit type ' + type);\n        }\n        this.attacks = attrs.attacks;\n        this.color = attrs.color;\n        this.image = attrs.image;\n        this.imageFile = attrs.imageFile;\n        this.maxLength = attrs.maxLength;\n        this.moves = attrs.moves;\n        this.name = attrs.name;\n        this.tiles = attrs.tiles;\n        this.tiles = tiles;\n        this.unitId = type;\n\n        this.startTurn();\n    }\n\n    getAttacks() {\n        return this.attacks.map(atk => allAttacks[atk]);\n    }\n\n    head() {\n        return this.tiles[0];\n    }\n\n    isOn(location: BoardLocation) {\n        return _.some(this.tiles, unitTile => _.isEqual(unitTile, location));\n    }\n\n    removeTiles(amount: number) {\n        if (amount <= 0) return;\n        this.tiles = _.take(this.tiles, this.tiles.length - amount);\n    }\n\n    canMoveTo(location: BoardLocation) {\n        return tileDistance(this.head(), location) === 1;\n    }\n\n    moveTo(location: BoardLocation) {\n        const newTiles = _.reject(this.tiles, unitTile => _.isEqual(unitTile, location));\n        newTiles.unshift(location);\n        this.tiles = newTiles;\n        this.removeTiles(this.tiles.length - this.maxLength);\n        this.movesTaken += 1;\n    }\n\n    canAttack(loc: BoardLocation, _attack: Attack | null) {\n        // todo\n        return this.canMoveTo(loc);\n    }\n\n    performAttack(attack: Attack, otherUnit: Unit) {\n        if (attack.type === 'standard') {\n            otherUnit.removeTiles(attack.damage);\n        }\n        this.endTurn();\n    }\n\n    hasMovementLeft() {\n        return this.movesTaken < this.moves && !this.finished;\n    }\n\n    startTurn() {\n        this.movesTaken = 0;\n        this.finished = false;\n        this.startingTiles = _.cloneDeep(this.tiles);\n    }\n\n    endTurn() {\n        this.finished = true;\n    }\n\n    resetMovement() {\n        this.movesTaken = 0;\n        this.tiles = _.cloneDeep(this.startingTiles);\n    }\n\n    movesRemaining() {\n        return this.moves - this.movesTaken;\n    }\n\n    // TODO: make this not return dupes\n    getConnectors() {\n        const connectors: UnitConnection[] = [];\n        this.tiles.forEach(tile1 => {\n            this.tiles.forEach(tile2 => {\n                if (tileDistance(tile1, tile2) === 1) {\n                    connectors.push([tile1, tile2]);\n                }\n            });\n        });\n        return connectors;\n    }\n}\n\nexport default Unit;\n","import { Board, Tile } from 'src/lib/types';\nimport Unit from '../lib/Unit';\n\nconst defaultBoard: Board = {\n    selectedUnit: null,\n    selectedAttack: null,\n    currentTurn: 'playerUnits',\n    tiles: [],\n    uploadLocations: [],\n    selectedUploadLocation: null,\n    playerUnits: [],\n    cpuUnits: [],\n    setupPhase: true,\n    isWon: false,\n    isLost: false,\n};\n\nfunction parseTiles(str: string) {\n    return str\n        .trim()\n        .split('\\n')\n        .map((line, i) => line.split('').map((letter, j) => ({ x: j, y: i, exists: letter === 'A' } as Tile)))\n        .flat();\n}\n\nexport type Level = {\n    name: string;\n    initializeBoard: () => Board;\n};\n\nconst levels: Level[] = [\n    {\n        name: 'level_one',\n        initializeBoard: () => ({\n            ...defaultBoard,\n            tiles: parseTiles(`\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nA AA A AAAAAAAA\nAA AAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA`),\n            uploadLocations: [\n                [1, 2],\n                [5, 1],\n            ],\n            cpuUnits: [\n                new Unit('cpu_unit1', [\n                    [6, 2],\n                    [7, 2],\n                    [7, 3],\n                    [7, 4],\n                ]),\n            ],\n        }),\n    },\n    {\n        name: 'level_two',\n        initializeBoard: () => ({\n            ...defaultBoard,\n            tiles: parseTiles(`\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nA AA A AAAAAAAA\nAA AAAAAAAAAAAA\n\n\n\nAAAAAAAAAAAAAAA`),\n            playerUnits: [\n                new Unit('player_unit1', [\n                    [1, 2],\n                    [2, 2],\n                    [2, 3],\n                    [2, 4],\n                ]),\n            ],\n            setupPhase: false,\n            cpuUnits: [\n                new Unit('cpu_unit1', [\n                    [6, 2],\n                    [7, 2],\n                    [7, 3],\n                    [7, 4],\n                ]),\n            ],\n        }),\n    },\n    {\n        name: 'level_three',\n        initializeBoard: () => ({\n            ...defaultBoard,\n            tiles: parseTiles(`\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nA AA A AAAAAAAA\nAA AAAAAAAAAAAA\nAAAAAAAAAAAAAAA\nAA         AAAA\nAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAA`),\n            playerUnits: [\n                new Unit('player_unit1', [\n                    [1, 2],\n                    [2, 2],\n                    [2, 3],\n                    [2, 4],\n                ]),\n            ],\n            setupPhase: false,\n            cpuUnits: [\n                new Unit('cpu_unit1', [\n                    [6, 2],\n                    [7, 2],\n                    [7, 3],\n                    [7, 4],\n                ]),\n            ],\n        }),\n    },\n];\n\nexport default levels;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { Attack } from 'src/lib/attacks';\nimport { Level } from 'src/lib/levels';\nimport { Board, BoardLocation } from 'src/lib/types';\nimport Unit, { UnitID } from 'src/lib/Unit';\n\nconst initialState: Board = {\n    selectedUnit: null,\n    selectedAttack: null,\n    tiles: [],\n    playerUnits: [],\n    cpuUnits: [],\n    uploadLocations: [],\n    selectedUploadLocation: null,\n    currentTurn: 'playerUnits',\n    setupPhase: true,\n    isWon: false,\n    isLost: false,\n};\n\nconst handleSelectUploadLocation = (state: Board, clickedTile: BoardLocation) => {\n    if (!state.setupPhase) {\n        return;\n    }\n    const isUploadLocation = _.some(state.uploadLocations, loc => _.isEqual(loc, clickedTile));\n    state.selectedUploadLocation = isUploadLocation ? clickedTile : null;\n};\n\nconst handleMovement = (state: Board, clickedTile: BoardLocation, clickedUnit: Unit | null) => {\n    if (state.setupPhase || !state.selectedUnit || state.selectedAttack) {\n        return false;\n    } // if not movement mode\n\n    if (\n        state.selectedUnit &&\n        state.selectedUnit.hasMovementLeft() &&\n        (!clickedUnit || clickedUnit === state.selectedUnit)\n    ) {\n        const boardTile = _.find(state.tiles, tile => tile.x === clickedTile[0] && tile.y === clickedTile[1]);\n        if (!boardTile) {\n            throw new Error();\n        }\n        if (boardTile.exists && !isAnyOtherUnitOn(state, clickedTile) && state.selectedUnit.canMoveTo(clickedTile)) {\n            state.selectedUnit.moveTo(clickedTile);\n            if (state.selectedUnit.movesRemaining() === 0) {\n                state.selectedAttack = state.selectedUnit.getAttacks()[0];\n            }\n            return true;\n        }\n    }\n    return false;\n};\n\nconst handleAttack = (state: Board, clickedTile: BoardLocation, clickedUnit: Unit | null) => {\n    if (state.setupPhase || !state.selectedAttack || !state.selectedUnit || state.selectedUnit.finished) {\n        return false;\n    } // if not attack mode\n    if (!state.selectedUnit.canAttack(clickedTile, state.selectedAttack)) {\n        return false;\n    }\n\n    if (clickedUnit) {\n        state.selectedUnit.performAttack(state.selectedAttack, clickedUnit);\n    } else {\n        state.selectedUnit.endTurn();\n    }\n    state.selectedAttack = null;\n    return true;\n};\n\nconst removeUnitAtLoc = (units: Unit[], loc: BoardLocation) => {\n    return units.filter(unit => !_.isEqual(unit.tiles, [loc]));\n};\n\n_.forEach(initialState.cpuUnits, unit => unit.endTurn());\nconst boardSlice = createSlice({\n    name: 'board',\n    initialState,\n    reducers: {\n        boardMouseClick: (state, action: PayloadAction<{ x: number; y: number }>) => {\n            const clickedTile = [action.payload.x, action.payload.y] as BoardLocation;\n            const clickedUnit =\n                _.find(_.concat(state.playerUnits, state.cpuUnits), unit => unit.isOn(clickedTile)) ?? null;\n\n            handleSelectUploadLocation(state, clickedTile);\n            const attacked = handleAttack(state, clickedTile, clickedUnit);\n            const moved = handleMovement(state, clickedTile, clickedUnit);\n            if (!attacked && !moved) {\n                state.selectedAttack = null;\n                state.selectedUnit = clickedUnit;\n            }\n            checkOtherStatuses(state);\n        },\n\n        endCurrentUnitTurn: state => {\n            state.selectedUnit!.endTurn();\n            checkOtherStatuses(state);\n        },\n\n        selectAttack: (state, action: PayloadAction<Attack>) => {\n            state.selectedAttack = action.payload;\n            checkOtherStatuses(state);\n        },\n\n        undoMovement: state => {\n            if (state.selectedUnit) {\n                state.selectedUnit.resetMovement();\n            }\n            state.selectedAttack = null;\n            checkOtherStatuses(state);\n        },\n\n        selectLevel: (_state, action: PayloadAction<Level>) => {\n            const newBoard = action.payload.initializeBoard();\n            newBoard.cpuUnits.forEach(unit => unit.endTurn());\n            return newBoard;\n        },\n\n        startGame: state => {\n            if (state.playerUnits.length === 0) {\n                return;\n            }\n            state.setupPhase = false;\n        },\n\n        unPlaceCurrentUnit: state => {\n            if (!state.selectedUploadLocation) {\n                return;\n            }\n            state.playerUnits = removeUnitAtLoc(state.playerUnits, state.selectedUploadLocation);\n            state.selectedUnit = null;\n        },\n\n        placeUnit: (state, action: PayloadAction<UnitID>) => {\n            if (!state.selectedUploadLocation) {\n                return;\n            }\n            state.playerUnits = removeUnitAtLoc(state.playerUnits, state.selectedUploadLocation);\n            const newUnit = new Unit(action.payload, [[...state.selectedUploadLocation]]);\n            state.playerUnits = [...state.playerUnits, newUnit];\n            state.selectedUnit = newUnit;\n        },\n    },\n});\n\nfunction isAnyOtherUnitOn({ playerUnits, cpuUnits, selectedUnit }: Board, tile: BoardLocation) {\n    const tiles = _(playerUnits)\n        .concat(cpuUnits)\n        .reject(unit => unit === selectedUnit)\n        .flatMap('tiles')\n        .value();\n    return _.some(tiles, t => _.isEqual(t, tile));\n}\n\nfunction checkOtherStatuses(state: Board) {\n    if (state.setupPhase) {\n        return;\n    }\n    const currentTeam = state[state.currentTurn];\n    if (_.every(currentTeam, 'finished')) {\n        console.log('finished', state.currentTurn);\n        const nextTeam = state.currentTurn === 'playerUnits' ? 'cpuUnits' : 'playerUnits';\n        _.forEach(state[nextTeam], unit => unit.startTurn());\n        state.currentTurn = nextTeam;\n        state.selectedUnit = state[nextTeam][0];\n        state.selectedAttack = null;\n    } else if (state.selectedUnit?.finished) {\n        state.selectedUnit = currentTeam.find(unit => !unit.finished) || null;\n    }\n    state.playerUnits = state.playerUnits.filter(unit => unit.tiles.length > 0);\n    state.cpuUnits = state.cpuUnits.filter(unit => unit.tiles.length > 0);\n    state.isWon = state.cpuUnits.length === 0;\n    state.isLost = state.playerUnits.length === 0;\n}\n\nexport const {\n    boardMouseClick,\n    selectAttack,\n    undoMovement,\n    selectLevel,\n    endCurrentUnitTurn,\n    placeUnit,\n    startGame,\n    unPlaceCurrentUnit,\n} = boardSlice.actions;\nexport default boardSlice.reducer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { changeRoute } from 'src/reducers/routerReducer';\nimport levels, { Level } from 'src/lib/levels';\nimport { selectLevel } from 'src/reducers/boardReducer';\n\nconst LevelSelect: React.FC = () => {\n    const dispatch = useDispatch();\n    const startLevel = (level: Level) => {\n        dispatch(selectLevel(level));\n        dispatch(changeRoute('/ingame'));\n    };\n\n    return (\n        <div className='screen-wrapper'>\n            <div style={{ width: '100%', height: '100px' }} />\n            <div style={{ marginRight: 'auto' }} />\n            <div className='menu-button'>Choose Level</div>\n            <div className='menu-container'>\n                {levels.map((level, n) => (\n                    <div key={n} className='menu-level' onClick={() => startLevel(level)}>\n                        <div className='menu-level-inside'>{n}</div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default LevelSelect;\n","import { useSelector } from 'react-redux';\nimport { Board } from 'src/lib/types';\nimport { RootReduxState } from 'src/reducers';\n\nexport const useBoard = (): Board => useSelector((state: RootReduxState) => state.board);\n","import { Dispatch } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { tileDistance } from 'src/common/helpers';\nimport { boardMouseClick, endCurrentUnitTurn, selectAttack } from 'src/reducers/boardReducer';\nimport { Board, BoardLocation, Tile } from './types';\nimport Unit from './Unit';\n\ntype WeightedTile = {\n    tile: Tile;\n    weight: number;\n    attackNow: boolean;\n};\n\nexport const playAsComputer = (board: Board, dispatch: Dispatch) => {\n    if (!(board.currentTurn === 'cpuUnits')) {\n        return;\n    }\n\n    const selectedUnit = board.selectedUnit;\n    if (!selectedUnit) {\n        return; // todo\n    }\n\n    if (board.selectedAttack) {\n        takeWeightedAttack(board, selectedUnit, dispatch);\n    } else if (selectedUnit.hasMovementLeft()) {\n        takeWeightedMove(board, selectedUnit, dispatch);\n    } else {\n        dispatch(selectAttack(selectedUnit.getAttacks()[0]));\n    }\n    // if (selectedUnit.movesRemaining() > 1) {\n\n    //     const randTile = _.sample(tilesCanMoveTo(board, selectedUnit));\n    //     if (!randTile) {\n    //         dispatch(endCurrentUnitTurn());\n    //         return;\n    //     }\n    //     dispatch(boardMouseClick({ x: randTile.x, y: randTile.y }));\n    // } else {\n    //     dispatch(endCurrentUnitTurn());\n    // }\n};\n\nconst takeWeightedMove = (board: Board, unit: Unit, dispatch: Dispatch) => {\n    let weighedTiles = sortPossibilities(tilesCanMoveTo(board, unit), board);\n    if (weighedTiles.length > 0) {\n        // console.log(weighedTiles.map(p => [p.attackNow ? 0 : 1, -p.weight]));\n\n        if (_.some(weighedTiles, p => p.attackNow)) {\n            dispatch(selectAttack(unit.getAttacks()[0]));\n            return;\n        }\n        weighedTiles = weighedTiles.filter(function (poss) {\n            return poss.weight === weighedTiles[0].weight;\n        });\n        // console.log(\n        //     weighedTiles.map(function (p) {\n        //         return p.tile.loc.concat(p.weight).join(', ');\n        //     })\n        // );\n        const choice = _.sample(weighedTiles)!.tile;\n        dispatch(boardMouseClick({ x: choice.x, y: choice.y }));\n    } else {\n        dispatch(selectAttack(unit.getAttacks()[0]));\n    }\n};\n\nconst unitsCanAttack = (selectedUnit: Unit, board: Board) => {\n    return board.playerUnits.reduce((acc, unit) => {\n        const loc = unit.tiles.find(loc => selectedUnit.canAttack(loc, null));\n        if (loc) {\n            return [...acc, { unit, loc }];\n        } else {\n            return acc;\n        }\n    }, [] as { unit: Unit; loc: BoardLocation }[]);\n};\n\nconst takeWeightedAttack = (board: Board, unit: Unit, dispatch: Dispatch) => {\n    const unitsToAttack = unitsCanAttack(unit, board);\n    const target = _.minBy(unitsToAttack, ({ unit }) => unit.tiles.length);\n    if (target) {\n        dispatch(boardMouseClick({ x: target.loc[0], y: target.loc[1] }));\n    } else {\n        dispatch(endCurrentUnitTurn());\n    }\n};\n\n// const unitAttackPriority = (unit: Unit, units: Unit[]) => {\n//     takeAIUnitAttack(unit, minHealthUnit);\n// };\n\nconst tilesCanMoveTo = (board: Board, unit: Unit) => {\n    return board.tiles.filter(tile => {\n        const loc: BoardLocation = [tile.x, tile.y];\n        return tile.exists && (!isAnyUnitOn(board, loc) || board.selectedUnit?.isOn(loc)) && unit.canMoveTo(loc);\n    });\n};\n\nconst isAnyUnitOn = (board: Board, loc: BoardLocation) => {\n    const units = board.playerUnits.concat(board.cpuUnits);\n    return _.some(units, unit => unit.isOn(loc));\n};\n\n// function randomElement(arr) {\n//     return arr[Math.floor(Math.random() * arr.length)];\n// }\n\n// function randInRange(min, max) {\n//     return Math.floor(Math.random() * (max - min + 1)) + min;\n// }\n\nconst sortPossibilities = (tiles: Tile[], board: Board) => {\n    return _.sortBy(\n        tiles.map(tile => weighTile(tile, board)),\n        p => -p.weight\n    );\n};\n\nconst weighTile = (tile: Tile, board: Board) => {\n    const unit = board.selectedUnit!;\n    let weight = 0;\n    let attackNow = false;\n    const unitDist = minDistFromEnemy([tile.x, tile.y], board);\n    const unitDistFromNow = minDistFromEnemy(unit.head(), board);\n\n    weight += unitDistFromNow - unitDist;\n    const range = unit.getAttacks()[0].range;\n    const isCurrentlyInRangeToAttack = unitDistFromNow <= range;\n    const wouldBeInRangeToAttackIfMoved = unitDist <= range;\n\n    if (\n        isCurrentlyInRangeToAttack &&\n        ((!wouldBeInRangeToAttackIfMoved && unit.movesRemaining() === 1) || unit.tiles.length === unit.maxLength)\n    ) {\n        attackNow = true;\n    } else if (wouldBeInRangeToAttackIfMoved) {\n        weight += 20;\n    }\n\n    if (unit.tiles.length < unit.maxLength && unitWillGrow(unit, tile)) {\n        weight += 10;\n    }\n    return { weight, tile, attackNow } as WeightedTile;\n};\n\nconst minDistFromEnemy = (tileLoc: BoardLocation, board: Board) => {\n    const distances = board.playerUnits.map(unit => unit.tiles.map(loc => tileDistance(loc, tileLoc))).flat();\n    return Math.min(...distances);\n};\n\nconst unitWillGrow = (unit: Unit, tile: Tile) => {\n    return unit.tiles.filter(([x, y]) => tile.x === x && tile.y === y).length === 0;\n};\n","import React from 'react';\n\nconst Layer: React.FC<{ index: number }> = ({ index, children }) => {\n    return (\n        <svg width='690' height='460' style={{ zIndex: index }}>\n            {children}\n        </svg>\n    );\n};\n\nexport default Layer;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useBoard } from 'src/common/redux';\nimport { playAsComputer } from 'src/lib/ai';\nimport { Tile } from 'src/lib/types';\nimport { boardMouseClick } from 'src/reducers/boardReducer';\n\nimport Layer from './Layer';\n\nconst MouseTile: React.FC<{ tile: Tile }> = ({ tile }) => {\n    const dispatch = useDispatch();\n    if (!tile.exists) {\n        return null;\n    }\n    return (\n        <rect\n            x={tile.x * 46}\n            y={tile.y * 46}\n            width='40'\n            height='40'\n            className='mouse-tile'\n            onClick={() => dispatch(boardMouseClick({ x: tile.x, y: tile.y }))}\n        />\n    );\n};\n\nconst MouseLayer: React.FC = () => {\n    const board = useBoard();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (board.currentTurn === 'cpuUnits' && !board.isWon && !board.isLost) {\n            setTimeout(() => playAsComputer(board, dispatch), 500);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [board, dispatch]);\n\n    if (board.currentTurn === 'cpuUnits') {\n        return null;\n    }\n    return (\n        <Layer index={4}>\n            {board.tiles.map((tile, i) => (\n                <MouseTile key={i} tile={tile} />\n            ))}\n        </Layer>\n    );\n};\n\nexport default MouseLayer;\n","import React from 'react';\nimport { useBoard } from '../../common/redux';\nimport _ from 'lodash';\n\nimport MouseLayer from './MouseLayer';\nimport Layer from './Layer';\nimport { Board, BoardLocation, Tile } from 'src/lib/types';\nimport Unit from 'src/lib/Unit';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { changeRoute } from 'src/reducers/routerReducer';\nimport { locationsNextTo } from 'src/common/helpers';\n\nconst TileBackground: React.FC<{ tile: Tile }> = ({ tile }) => {\n    if (!tile.exists) {\n        return null;\n    }\n    return <rect x={tile.x * 46} y={tile.y * 46} width='40' height='40' style={{ fill: 'white', opacity: 0.25 }} />;\n};\n\nconst TileLayer: React.FC<{ tiles: Tile[] }> = ({ tiles }) => {\n    return (\n        <Layer index={1}>\n            {tiles.map((tile, i) => (\n                <TileBackground key={i} tile={tile} />\n            ))}\n        </Layer>\n    );\n};\n\nconst UnitComp: React.FC<{ unit: Unit }> = ({ unit }) => {\n    if (unit.tiles.length === 0) {\n        return null;\n    }\n\n    const headImage = unit.imageFile && (\n        <ImageComp location={unit.tiles[0]} href={`/game123/assets/units/${unit.imageFile}`} />\n    );\n    const headText = (\n        <text x={unit.tiles[0][0] * 46} y={unit.tiles[0][1] * 46 + 40} textLength='40'>\n            {unit.image}\n        </text>\n    );\n\n    return (\n        <>\n            {unit.tiles.map((tile, i) => (\n                <rect key={i} x={tile[0] * 46} y={tile[1] * 46} width='40' height='40' fill={unit.color} />\n            ))}\n            {headImage || headText}\n            {unit.finished && (\n                <>\n                    <circle cx={unit.tiles[0][0] * 46 + 40} cy={unit.tiles[0][1] * 46} r='7' fill='#ffffff' />\n                    <text x={unit.tiles[0][0] * 46 + 34} y={unit.tiles[0][1] * 46 + 6} r='7' textLength='14'>\n                        ✓\n                    </text>\n                </>\n            )}\n            {unit.getConnectors().map((connection, i) => {\n                const [loc1, loc2] = connection;\n                const xSpot = Math.min(loc1[0], loc2[0]) * 46;\n                const ySpot = Math.min(loc1[1], loc2[1]) * 46;\n                const horiz = loc1[1] === loc2[1];\n                return (\n                    <rect\n                        key={i}\n                        x={xSpot + (horiz ? 40 : 13)}\n                        y={ySpot + (horiz ? 13 : 40)}\n                        width={horiz ? 6 : 14}\n                        height={horiz ? 14 : 6}\n                        fill={unit.color}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nconst ImageComp: React.FC<{ location: BoardLocation; href: string; opacity?: string | undefined }> = ({\n    location,\n    href,\n    opacity,\n}) => {\n    return <image href={href} width='40' height='40' x={location[0] * 46} y={location[1] * 46} opacity={opacity} />;\n};\n\nconst UnitLayer: React.FC<{ units: Unit[] }> = ({ units }) => {\n    return (\n        <Layer index={2}>\n            {units.map((unit, i) => (\n                <UnitComp key={i} unit={unit} />\n            ))}\n        </Layer>\n    );\n};\n\nconst renderMovementIndicators = (board: Board) => {\n    const units = _.concat(board.playerUnits, board.cpuUnits);\n    if (\n        !board.selectedUnit ||\n        !board.selectedUnit.hasMovementLeft() ||\n        board.selectedAttack ||\n        !board.selectedUnit.head()\n    ) {\n        return null;\n    }\n    const otherUnitsTiles = _.flatMap(\n        units.filter(unit => unit !== board.selectedUnit),\n        'tiles'\n    );\n\n    const indicators = locationsNextTo(board.selectedUnit.head(), board.selectedUnit.movesRemaining()).filter(\n        ([x, y]) => {\n            const found = _.find(board.tiles, loc => loc.x === x && loc.y === y);\n            return (\n                found && found.exists && _.every(otherUnitsTiles, otherUnitsTile => !_.isEqual(otherUnitsTile, [x, y]))\n            );\n        }\n    );\n    return indicators.map((loc, index) => (\n        <ImageComp key={index} href='/game123/assets/movement.png' opacity='0.3' location={loc} />\n    ));\n};\n\nconst renderAttackIndicators = (board: Board) => {\n    if (!board.selectedAttack) {\n        return null;\n    }\n    const indicators = locationsNextTo(board.selectedUnit!.head()).filter(([x, y]) => {\n        const found = _.find(board.tiles, loc => loc.x === x && loc.y === y);\n        return (\n            found &&\n            found.exists &&\n            _.every(board.selectedUnit!.tiles, selectedUnitTile => !_.isEqual(selectedUnitTile, [x, y]))\n        );\n    });\n    return indicators.map((loc, index) => <ImageComp key={index} href='/game123/assets/target.png' location={loc} />);\n};\n\nconst renderUploadSpots = (board: Board) => {\n    if (!board.setupPhase) {\n        return null;\n    }\n    return (\n        <>\n            {board.uploadLocations.map(\n                (loc, index) =>\n                    !board.playerUnits.some(unit => unit.isOn(loc)) && (\n                        <ImageComp key={index} href='/game123/assets/upload.png' location={loc} />\n                    )\n            )}\n        </>\n    );\n};\n\nconst EffectsLayer: React.FC = () => {\n    const board = useBoard();\n    return (\n        <Layer index={3}>\n            {renderMovementIndicators(board)}\n            {renderAttackIndicators(board)}\n            {renderUploadSpots(board)}\n        </Layer>\n    );\n};\n\nconst EndPopup: React.FC<{ isWon: boolean; isLost: boolean }> = ({ isWon, isLost }) => {\n    const dispatch = useDispatch();\n    if (!isWon && !isLost) {\n        return null;\n    }\n    return (\n        <div style={{ width: 690, height: 460, zIndex: 5, position: 'relative', paddingTop: 160 }}>\n            <div\n                style={{\n                    height: 100,\n                    margin: 'auto',\n                    textAlign: 'center',\n                    padding: 10,\n                    border: '3px solid #111',\n                    width: 200,\n                    backgroundColor: '#323',\n                }}\n            >\n                You {isWon ? 'win' : 'lose'}\n                <br />\n                <Button onClick={() => dispatch(changeRoute('/level-select'))}>Go back</Button>\n            </div>\n        </div>\n    );\n};\n\nconst GameBoard: React.FC = () => {\n    const board = useBoard();\n    return (\n        <div className='board-wrapper semi-cover-bg'>\n            <TileLayer tiles={board.tiles} />\n            <UnitLayer units={_.concat(board.playerUnits, board.cpuUnits)} />\n            <EffectsLayer />\n            <MouseLayer />\n            <EndPopup isWon={board.isWon} isLost={board.isLost} />\n        </div>\n    );\n};\n\nexport default GameBoard;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { UnitID } from 'src/lib/Unit';\n\nexport type Inventory = {\n    ownedUnits: Record<UnitID, number>;\n};\n\nexport const defaultUnits: Record<UnitID, number> = {\n    player_unit1: 0,\n    cpu_unit1: 0,\n    hard_drive: 0,\n    rainbow_table: 0,\n};\n\nconst initialState: Inventory = {\n    ownedUnits: {\n        ...defaultUnits,\n        player_unit1: 2,\n        hard_drive: 2,\n        rainbow_table: 2,\n    },\n};\n\nconst inventorySlice = createSlice({\n    name: 'inventory',\n    initialState,\n    reducers: {\n        buyUnit: (state, action: PayloadAction<UnitID>) => {\n            state.ownedUnits[action.payload]++;\n        },\n    },\n});\n\nexport const { buyUnit } = inventorySlice.actions;\nexport default inventorySlice.reducer;\n","import _ from 'lodash';\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Attack } from 'src/lib/attacks';\nimport Unit, { UnitID } from 'src/lib/Unit';\nimport { RootReduxState } from 'src/reducers';\nimport {\n    endCurrentUnitTurn,\n    placeUnit,\n    selectAttack,\n    startGame,\n    undoMovement,\n    unPlaceCurrentUnit,\n} from 'src/reducers/boardReducer';\nimport { defaultUnits } from 'src/reducers/inventoryReducer';\nimport { useBoard } from '../../common/redux';\n\nconst AttackButton: React.FC<{\n    attack: Attack;\n    selectedAttack: Attack | null;\n}> = ({ attack, selectedAttack }) => {\n    const dispatch = useDispatch();\n    let selectedClass = '';\n    if (selectedAttack && selectedAttack.name === attack.name) {\n        selectedClass = 'selected-attack';\n    }\n    return (\n        <div className={'attack ' + selectedClass} onClick={() => dispatch(selectAttack(attack))}>\n            {attack.name}\n        </div>\n    );\n};\n\nconst placedCounts = (units: Unit[]) => {\n    return units.reduce(\n        (acc: Record<UnitID, number>, unit) => ({ ...acc, [unit.unitId]: (acc[unit.unitId] || 0) + 1 }),\n        defaultUnits\n    );\n};\n\nconst PlaceUnitRow: React.FC<{ unitId: UnitID; placed: Record<UnitID, number> }> = ({ unitId, placed }) => {\n    const inventory = useSelector((state: RootReduxState) => state.inventory);\n    const dispatch = useDispatch();\n    const amountLeft = inventory.ownedUnits[unitId] - placed[unitId];\n    return (\n        <div>\n            {unitId} x{amountLeft}{' '}\n            {amountLeft > 0 && <Button onClick={() => dispatch(placeUnit(unitId))}>Place</Button>}\n        </div>\n    );\n};\n\nconst PlaceUnitButtons: React.FC = () => {\n    const board = useBoard();\n    const dispatch = useDispatch();\n    const inventory = useSelector((state: RootReduxState) => state.inventory);\n    if (!board.setupPhase || !board.selectedUploadLocation) {\n        return null;\n    }\n    const placed = placedCounts(board.playerUnits);\n    const unitIds = (Object.keys(inventory.ownedUnits) as UnitID[]).filter(\n        (key: UnitID) => inventory.ownedUnits[key] > 0\n    );\n    const placedUnitExistsHere = _.some(\n        board.playerUnits,\n        unit => board.selectedUploadLocation && unit.isOn(board.selectedUploadLocation)\n    );\n    return (\n        <>\n            <h4>setupPhase</h4>\n            {unitIds.map((unitId, index) => (\n                <PlaceUnitRow key={index} unitId={unitId} placed={placed} />\n            ))}\n            {placedUnitExistsHere && (\n                <div className='attack' onClick={() => dispatch(unPlaceCurrentUnit())}>\n                    Unplace\n                </div>\n            )}\n        </>\n    );\n};\n\nconst UnitInfo: React.FC = () => {\n    const board = useBoard();\n    const dispatch = useDispatch();\n    const unit = board.selectedUnit;\n    if (!unit) {\n        return null;\n    }\n\n    return (\n        <>\n            <h3>{unit.name}</h3>\n            {unit.finished && <div>Turn Finished</div>}\n            <div>Health: {unit.tiles.length}</div>\n            <div>Max Health: {unit.maxLength}</div>\n            <div>\n                Move: {unit.movesTaken}/{unit.moves}\n            </div>\n            <div>attack: {JSON.stringify(board.selectedAttack)}</div>\n            {unit.getAttacks().map((attack, index) => (\n                <AttackButton key={index} selectedAttack={board.selectedAttack} attack={attack} />\n            ))}\n            {!board.setupPhase && (\n                <>\n                    <div className='attack' onClick={() => dispatch(endCurrentUnitTurn())}>\n                        End Turn\n                    </div>\n                    <div className='attack' onClick={() => dispatch(undoMovement())}>\n                        Undo\n                    </div>\n                </>\n            )}\n        </>\n    );\n};\n\nconst Infobar: React.FC = () => {\n    const board = useBoard();\n    const dispatch = useDispatch();\n    return (\n        <div className='infobar semi-cover-bg'>\n            <h4>{board.currentTurn}</h4>\n            <PlaceUnitButtons />\n            <UnitInfo />\n            {board.setupPhase && board.playerUnits.length > 0 && (\n                <div className='attack' onClick={() => dispatch(startGame())}>\n                    Start Game\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Infobar;\n","import MainMenu from './MainMenu';\nimport Options from './Options';\nimport About from './About';\nimport NewGame from './NewGame';\nimport LevelSelect from './LevelSelect';\nimport Ingame from './Ingame';\n\nconst allRoutes: Record<string, React.FC> = {\n    '/': MainMenu,\n    '/options': Options,\n    '/about': About,\n    '/new-game': NewGame,\n    '/level-select': LevelSelect,\n    '/ingame': Ingame,\n};\n\nexport default allRoutes;\n","import React from 'react';\nimport GameBoard from './board/GameBoard';\nimport Infobar from './board/Infobar';\n\nconst Ingame: React.FC = () => {\n    return (\n        <div className='screen-wrapper'>\n            <div className='row top' />\n            <div className='row'>\n                <div className='col-md-3'>\n                    <ul className='list-group'>\n                        <Infobar />\n                    </ul>\n                </div>\n                <div className='col-md-7'>\n                    <GameBoard />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Ingame;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootReduxState } from 'src/reducers';\nimport routes from './routes';\n\nconst CustomRouter: React.FC = () => {\n    const routerState = useSelector((state: RootReduxState) => state.route);\n    const CurrentRoute = routes[routerState.currentRoute];\n\n    if (CurrentRoute) {\n        return <CurrentRoute />;\n    } else {\n        console.warn(`Route did not match - '${routerState.currentRoute}'`);\n        return <span />;\n    }\n};\n\nexport default CustomRouter;\n","import { createStore, combineReducers } from 'redux';\nimport routerReducer from './routerReducer';\nimport boardReducer from './boardReducer';\nimport inventoryReducer from './inventoryReducer';\n\nconst reducers = {\n    route: routerReducer,\n    board: boardReducer,\n    inventory: inventoryReducer,\n};\n\nexport const store = createStore(combineReducers(reducers));\n(window as any).getState = store.getState;\nexport const dispatch = store.dispatch;\nexport type RootReduxState = ReturnType<typeof store.getState>;\n","import React from 'react';\nimport CustomRouter from './components/CustomRouter';\nimport { store } from './reducers';\nimport { Provider } from 'react-redux';\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <div className='game-wrapper'>\n                <CustomRouter />\n            </div>\n        </Provider>\n    );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './custom.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}